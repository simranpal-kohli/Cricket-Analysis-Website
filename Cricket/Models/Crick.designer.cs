#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cricket.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cricket")]
	public partial class CrickDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPlayerDetail(PlayerDetail instance);
    partial void UpdatePlayerDetail(PlayerDetail instance);
    partial void DeletePlayerDetail(PlayerDetail instance);
    partial void InsertMatchDetail(MatchDetail instance);
    partial void UpdateMatchDetail(MatchDetail instance);
    partial void DeleteMatchDetail(MatchDetail instance);
    partial void InsertLeagueDetail(LeagueDetail instance);
    partial void UpdateLeagueDetail(LeagueDetail instance);
    partial void DeleteLeagueDetail(LeagueDetail instance);
    partial void InsertCategoryDetail(CategoryDetail instance);
    partial void UpdateCategoryDetail(CategoryDetail instance);
    partial void DeleteCategoryDetail(CategoryDetail instance);
    partial void InsertPlayerInfo(PlayerInfo instance);
    partial void UpdatePlayerInfo(PlayerInfo instance);
    partial void DeletePlayerInfo(PlayerInfo instance);
    partial void InsertTeamDetail(TeamDetail instance);
    partial void UpdateTeamDetail(TeamDetail instance);
    partial void DeleteTeamDetail(TeamDetail instance);
    #endregion
		
		public CrickDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CricketConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CrickDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrickDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrickDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrickDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PlayerDetail> PlayerDetails
		{
			get
			{
				return this.GetTable<PlayerDetail>();
			}
		}
		
		public System.Data.Linq.Table<MatchDetail> MatchDetails
		{
			get
			{
				return this.GetTable<MatchDetail>();
			}
		}
		
		public System.Data.Linq.Table<LeagueDetail> LeagueDetails
		{
			get
			{
				return this.GetTable<LeagueDetail>();
			}
		}
		
		public System.Data.Linq.Table<CategoryDetail> CategoryDetails
		{
			get
			{
				return this.GetTable<CategoryDetail>();
			}
		}
		
		public System.Data.Linq.Table<PlayerInfo> PlayerInfos
		{
			get
			{
				return this.GetTable<PlayerInfo>();
			}
		}
		
		public System.Data.Linq.Table<TeamDetail> TeamDetails
		{
			get
			{
				return this.GetTable<TeamDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerDetail")]
	public partial class PlayerDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerInfoId;
		
		private System.Nullable<int> _PlayerId;
		
		private System.Nullable<int> _MatchId;
		
		private System.Nullable<int> _CategoryId;
		
		private System.Nullable<int> _PlayerRun;
		
		private System.Nullable<decimal> _SR;
		
		private System.Nullable<int> _PlayerWickets;
		
		private System.Nullable<int> _Overs;
		
		private System.Nullable<decimal> _ER;
		
		private string _Review;
		
		private EntityRef<MatchDetail> _MatchDetail;
		
		private EntityRef<CategoryDetail> _CategoryDetail;
		
		private EntityRef<PlayerInfo> _PlayerInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerInfoIdChanging(int value);
    partial void OnPlayerInfoIdChanged();
    partial void OnPlayerIdChanging(System.Nullable<int> value);
    partial void OnPlayerIdChanged();
    partial void OnMatchIdChanging(System.Nullable<int> value);
    partial void OnMatchIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnPlayerRunChanging(System.Nullable<int> value);
    partial void OnPlayerRunChanged();
    partial void OnSRChanging(System.Nullable<decimal> value);
    partial void OnSRChanged();
    partial void OnPlayerWicketsChanging(System.Nullable<int> value);
    partial void OnPlayerWicketsChanged();
    partial void OnOversChanging(System.Nullable<int> value);
    partial void OnOversChanged();
    partial void OnERChanging(System.Nullable<decimal> value);
    partial void OnERChanged();
    partial void OnReviewChanging(string value);
    partial void OnReviewChanged();
    #endregion
		
		public PlayerDetail()
		{
			this._MatchDetail = default(EntityRef<MatchDetail>);
			this._CategoryDetail = default(EntityRef<CategoryDetail>);
			this._PlayerInfo = default(EntityRef<PlayerInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerInfoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerInfoId
		{
			get
			{
				return this._PlayerInfoId;
			}
			set
			{
				if ((this._PlayerInfoId != value))
				{
					this.OnPlayerInfoIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerInfoId = value;
					this.SendPropertyChanged("PlayerInfoId");
					this.OnPlayerInfoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int")]
		public System.Nullable<int> PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._PlayerInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int")]
		public System.Nullable<int> MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._MatchDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._CategoryDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerRun", DbType="Int")]
		public System.Nullable<int> PlayerRun
		{
			get
			{
				return this._PlayerRun;
			}
			set
			{
				if ((this._PlayerRun != value))
				{
					this.OnPlayerRunChanging(value);
					this.SendPropertyChanging();
					this._PlayerRun = value;
					this.SendPropertyChanged("PlayerRun");
					this.OnPlayerRunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SR", DbType="SmallMoney")]
		public System.Nullable<decimal> SR
		{
			get
			{
				return this._SR;
			}
			set
			{
				if ((this._SR != value))
				{
					this.OnSRChanging(value);
					this.SendPropertyChanging();
					this._SR = value;
					this.SendPropertyChanged("SR");
					this.OnSRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerWickets", DbType="Int")]
		public System.Nullable<int> PlayerWickets
		{
			get
			{
				return this._PlayerWickets;
			}
			set
			{
				if ((this._PlayerWickets != value))
				{
					this.OnPlayerWicketsChanging(value);
					this.SendPropertyChanging();
					this._PlayerWickets = value;
					this.SendPropertyChanged("PlayerWickets");
					this.OnPlayerWicketsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Overs", DbType="Int")]
		public System.Nullable<int> Overs
		{
			get
			{
				return this._Overs;
			}
			set
			{
				if ((this._Overs != value))
				{
					this.OnOversChanging(value);
					this.SendPropertyChanging();
					this._Overs = value;
					this.SendPropertyChanged("Overs");
					this.OnOversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ER", DbType="SmallMoney")]
		public System.Nullable<decimal> ER
		{
			get
			{
				return this._ER;
			}
			set
			{
				if ((this._ER != value))
				{
					this.OnERChanging(value);
					this.SendPropertyChanging();
					this._ER = value;
					this.SendPropertyChanged("ER");
					this.OnERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="NVarChar(MAX)")]
		public string Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchDetail_PlayerDetail", Storage="_MatchDetail", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true)]
		public MatchDetail MatchDetail
		{
			get
			{
				return this._MatchDetail.Entity;
			}
			set
			{
				MatchDetail previousValue = this._MatchDetail.Entity;
				if (((previousValue != value) 
							|| (this._MatchDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchDetail.Entity = null;
						previousValue.PlayerDetails.Remove(this);
					}
					this._MatchDetail.Entity = value;
					if ((value != null))
					{
						value.PlayerDetails.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(Nullable<int>);
					}
					this.SendPropertyChanged("MatchDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDetail_PlayerDetail", Storage="_CategoryDetail", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public CategoryDetail CategoryDetail
		{
			get
			{
				return this._CategoryDetail.Entity;
			}
			set
			{
				CategoryDetail previousValue = this._CategoryDetail.Entity;
				if (((previousValue != value) 
							|| (this._CategoryDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryDetail.Entity = null;
						previousValue.PlayerDetails.Remove(this);
					}
					this._CategoryDetail.Entity = value;
					if ((value != null))
					{
						value.PlayerDetails.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_PlayerDetail", Storage="_PlayerInfo", ThisKey="PlayerId", OtherKey="PlayerId", IsForeignKey=true)]
		public PlayerInfo PlayerInfo
		{
			get
			{
				return this._PlayerInfo.Entity;
			}
			set
			{
				PlayerInfo previousValue = this._PlayerInfo.Entity;
				if (((previousValue != value) 
							|| (this._PlayerInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerInfo.Entity = null;
						previousValue.PlayerDetails.Remove(this);
					}
					this._PlayerInfo.Entity = value;
					if ((value != null))
					{
						value.PlayerDetails.Add(this);
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._PlayerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlayerInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchDetail")]
	public partial class MatchDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MatchId;
		
		private System.Nullable<int> _TeamAId;
		
		private System.Nullable<int> _TeamBId;
		
		private string _Venue;
		
		private System.Nullable<System.DateTime> _MatchDate;
		
		private System.Nullable<int> _LeagueId;
		
		private EntitySet<PlayerDetail> _PlayerDetails;
		
		private EntityRef<LeagueDetail> _LeagueDetail;
		
		private EntityRef<TeamDetail> _TeamDetail;
		
		private EntityRef<TeamDetail> _TeamDetail1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnTeamAIdChanging(System.Nullable<int> value);
    partial void OnTeamAIdChanged();
    partial void OnTeamBIdChanging(System.Nullable<int> value);
    partial void OnTeamBIdChanged();
    partial void OnVenueChanging(string value);
    partial void OnVenueChanged();
    partial void OnMatchDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMatchDateChanged();
    partial void OnLeagueIdChanging(System.Nullable<int> value);
    partial void OnLeagueIdChanged();
    #endregion
		
		public MatchDetail()
		{
			this._PlayerDetails = new EntitySet<PlayerDetail>(new Action<PlayerDetail>(this.attach_PlayerDetails), new Action<PlayerDetail>(this.detach_PlayerDetails));
			this._LeagueDetail = default(EntityRef<LeagueDetail>);
			this._TeamDetail = default(EntityRef<TeamDetail>);
			this._TeamDetail1 = default(EntityRef<TeamDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAId", DbType="Int")]
		public System.Nullable<int> TeamAId
		{
			get
			{
				return this._TeamAId;
			}
			set
			{
				if ((this._TeamAId != value))
				{
					if (this._TeamDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamAIdChanging(value);
					this.SendPropertyChanging();
					this._TeamAId = value;
					this.SendPropertyChanged("TeamAId");
					this.OnTeamAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamBId", DbType="Int")]
		public System.Nullable<int> TeamBId
		{
			get
			{
				return this._TeamBId;
			}
			set
			{
				if ((this._TeamBId != value))
				{
					if (this._TeamDetail1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamBIdChanging(value);
					this.SendPropertyChanging();
					this._TeamBId = value;
					this.SendPropertyChanged("TeamBId");
					this.OnTeamBIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Venue", DbType="NVarChar(50)")]
		public string Venue
		{
			get
			{
				return this._Venue;
			}
			set
			{
				if ((this._Venue != value))
				{
					this.OnVenueChanging(value);
					this.SendPropertyChanging();
					this._Venue = value;
					this.SendPropertyChanged("Venue");
					this.OnVenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate", DbType="Date")]
		public System.Nullable<System.DateTime> MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="Int")]
		public System.Nullable<int> LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._LeagueDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchDetail_PlayerDetail", Storage="_PlayerDetails", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<PlayerDetail> PlayerDetails
		{
			get
			{
				return this._PlayerDetails;
			}
			set
			{
				this._PlayerDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueDetail_MatchDetail", Storage="_LeagueDetail", ThisKey="LeagueId", OtherKey="LeagueId", IsForeignKey=true)]
		public LeagueDetail LeagueDetail
		{
			get
			{
				return this._LeagueDetail.Entity;
			}
			set
			{
				LeagueDetail previousValue = this._LeagueDetail.Entity;
				if (((previousValue != value) 
							|| (this._LeagueDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueDetail.Entity = null;
						previousValue.MatchDetails.Remove(this);
					}
					this._LeagueDetail.Entity = value;
					if ((value != null))
					{
						value.MatchDetails.Add(this);
						this._LeagueId = value.LeagueId;
					}
					else
					{
						this._LeagueId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamDetail_MatchDetail", Storage="_TeamDetail", ThisKey="TeamAId", OtherKey="TeamId", IsForeignKey=true)]
		public TeamDetail TeamDetail
		{
			get
			{
				return this._TeamDetail.Entity;
			}
			set
			{
				TeamDetail previousValue = this._TeamDetail.Entity;
				if (((previousValue != value) 
							|| (this._TeamDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamDetail.Entity = null;
						previousValue.MatchDetails.Remove(this);
					}
					this._TeamDetail.Entity = value;
					if ((value != null))
					{
						value.MatchDetails.Add(this);
						this._TeamAId = value.TeamId;
					}
					else
					{
						this._TeamAId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeamDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamDetail_MatchDetail1", Storage="_TeamDetail1", ThisKey="TeamBId", OtherKey="TeamId", IsForeignKey=true)]
		public TeamDetail TeamDetail1
		{
			get
			{
				return this._TeamDetail1.Entity;
			}
			set
			{
				TeamDetail previousValue = this._TeamDetail1.Entity;
				if (((previousValue != value) 
							|| (this._TeamDetail1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamDetail1.Entity = null;
						previousValue.MatchDetails1.Remove(this);
					}
					this._TeamDetail1.Entity = value;
					if ((value != null))
					{
						value.MatchDetails1.Add(this);
						this._TeamBId = value.TeamId;
					}
					else
					{
						this._TeamBId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeamDetail1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerDetails(PlayerDetail entity)
		{
			this.SendPropertyChanging();
			entity.MatchDetail = this;
		}
		
		private void detach_PlayerDetails(PlayerDetail entity)
		{
			this.SendPropertyChanging();
			entity.MatchDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueDetail")]
	public partial class LeagueDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueId;
		
		private string _LeagueName;
		
		private EntitySet<MatchDetail> _MatchDetails;
		
		private EntitySet<PlayerInfo> _PlayerInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIdChanging(int value);
    partial void OnLeagueIdChanged();
    partial void OnLeagueNameChanging(string value);
    partial void OnLeagueNameChanged();
    #endregion
		
		public LeagueDetail()
		{
			this._MatchDetails = new EntitySet<MatchDetail>(new Action<MatchDetail>(this.attach_MatchDetails), new Action<MatchDetail>(this.detach_MatchDetails));
			this._PlayerInfos = new EntitySet<PlayerInfo>(new Action<PlayerInfo>(this.attach_PlayerInfos), new Action<PlayerInfo>(this.detach_PlayerInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueName", DbType="NVarChar(50)")]
		public string LeagueName
		{
			get
			{
				return this._LeagueName;
			}
			set
			{
				if ((this._LeagueName != value))
				{
					this.OnLeagueNameChanging(value);
					this.SendPropertyChanging();
					this._LeagueName = value;
					this.SendPropertyChanged("LeagueName");
					this.OnLeagueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueDetail_MatchDetail", Storage="_MatchDetails", ThisKey="LeagueId", OtherKey="LeagueId")]
		public EntitySet<MatchDetail> MatchDetails
		{
			get
			{
				return this._MatchDetails;
			}
			set
			{
				this._MatchDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueDetail_PlayerInfo", Storage="_PlayerInfos", ThisKey="LeagueId", OtherKey="LeagueId")]
		public EntitySet<PlayerInfo> PlayerInfos
		{
			get
			{
				return this._PlayerInfos;
			}
			set
			{
				this._PlayerInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchDetails(MatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.LeagueDetail = this;
		}
		
		private void detach_MatchDetails(MatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.LeagueDetail = null;
		}
		
		private void attach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueDetail = this;
		}
		
		private void detach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.LeagueDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryDetail")]
	public partial class CategoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _CategoryName;
		
		private EntitySet<PlayerDetail> _PlayerDetails;
		
		private EntitySet<PlayerInfo> _PlayerInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public CategoryDetail()
		{
			this._PlayerDetails = new EntitySet<PlayerDetail>(new Action<PlayerDetail>(this.attach_PlayerDetails), new Action<PlayerDetail>(this.detach_PlayerDetails));
			this._PlayerInfos = new EntitySet<PlayerInfo>(new Action<PlayerInfo>(this.attach_PlayerInfos), new Action<PlayerInfo>(this.detach_PlayerInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDetail_PlayerDetail", Storage="_PlayerDetails", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<PlayerDetail> PlayerDetails
		{
			get
			{
				return this._PlayerDetails;
			}
			set
			{
				this._PlayerDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDetail_PlayerInfo", Storage="_PlayerInfos", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<PlayerInfo> PlayerInfos
		{
			get
			{
				return this._PlayerInfos;
			}
			set
			{
				this._PlayerInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerDetails(PlayerDetail entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDetail = this;
		}
		
		private void detach_PlayerDetails(PlayerDetail entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDetail = null;
		}
		
		private void attach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDetail = this;
		}
		
		private void detach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.CategoryDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerInfo")]
	public partial class PlayerInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private System.Nullable<int> _TeamId;
		
		private string _PlayerName;
		
		private System.Nullable<int> _LeagueId;
		
		private System.Nullable<int> _CategoryId;
		
		private EntitySet<PlayerDetail> _PlayerDetails;
		
		private EntityRef<CategoryDetail> _CategoryDetail;
		
		private EntityRef<LeagueDetail> _LeagueDetail;
		
		private EntityRef<TeamDetail> _TeamDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnTeamIdChanging(System.Nullable<int> value);
    partial void OnTeamIdChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    partial void OnLeagueIdChanging(System.Nullable<int> value);
    partial void OnLeagueIdChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public PlayerInfo()
		{
			this._PlayerDetails = new EntitySet<PlayerDetail>(new Action<PlayerDetail>(this.attach_PlayerDetails), new Action<PlayerDetail>(this.detach_PlayerDetails));
			this._CategoryDetail = default(EntityRef<CategoryDetail>);
			this._LeagueDetail = default(EntityRef<LeagueDetail>);
			this._TeamDetail = default(EntityRef<TeamDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int")]
		public System.Nullable<int> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="Int")]
		public System.Nullable<int> LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._LeagueDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._CategoryDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerInfo_PlayerDetail", Storage="_PlayerDetails", ThisKey="PlayerId", OtherKey="PlayerId")]
		public EntitySet<PlayerDetail> PlayerDetails
		{
			get
			{
				return this._PlayerDetails;
			}
			set
			{
				this._PlayerDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryDetail_PlayerInfo", Storage="_CategoryDetail", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public CategoryDetail CategoryDetail
		{
			get
			{
				return this._CategoryDetail.Entity;
			}
			set
			{
				CategoryDetail previousValue = this._CategoryDetail.Entity;
				if (((previousValue != value) 
							|| (this._CategoryDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryDetail.Entity = null;
						previousValue.PlayerInfos.Remove(this);
					}
					this._CategoryDetail.Entity = value;
					if ((value != null))
					{
						value.PlayerInfos.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueDetail_PlayerInfo", Storage="_LeagueDetail", ThisKey="LeagueId", OtherKey="LeagueId", IsForeignKey=true)]
		public LeagueDetail LeagueDetail
		{
			get
			{
				return this._LeagueDetail.Entity;
			}
			set
			{
				LeagueDetail previousValue = this._LeagueDetail.Entity;
				if (((previousValue != value) 
							|| (this._LeagueDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueDetail.Entity = null;
						previousValue.PlayerInfos.Remove(this);
					}
					this._LeagueDetail.Entity = value;
					if ((value != null))
					{
						value.PlayerInfos.Add(this);
						this._LeagueId = value.LeagueId;
					}
					else
					{
						this._LeagueId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LeagueDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamDetail_PlayerInfo", Storage="_TeamDetail", ThisKey="TeamId", OtherKey="TeamId", IsForeignKey=true)]
		public TeamDetail TeamDetail
		{
			get
			{
				return this._TeamDetail.Entity;
			}
			set
			{
				TeamDetail previousValue = this._TeamDetail.Entity;
				if (((previousValue != value) 
							|| (this._TeamDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamDetail.Entity = null;
						previousValue.PlayerInfos.Remove(this);
					}
					this._TeamDetail.Entity = value;
					if ((value != null))
					{
						value.PlayerInfos.Add(this);
						this._TeamId = value.TeamId;
					}
					else
					{
						this._TeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeamDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerDetails(PlayerDetail entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = this;
		}
		
		private void detach_PlayerDetails(PlayerDetail entity)
		{
			this.SendPropertyChanging();
			entity.PlayerInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamDetail")]
	public partial class TeamDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamId;
		
		private string _TeamName;
		
		private System.Data.Linq.Binary _Flag;
		
		private EntitySet<MatchDetail> _MatchDetails;
		
		private EntitySet<MatchDetail> _MatchDetails1;
		
		private EntitySet<PlayerInfo> _PlayerInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnFlagChanging(System.Data.Linq.Binary value);
    partial void OnFlagChanged();
    #endregion
		
		public TeamDetail()
		{
			this._MatchDetails = new EntitySet<MatchDetail>(new Action<MatchDetail>(this.attach_MatchDetails), new Action<MatchDetail>(this.detach_MatchDetails));
			this._MatchDetails1 = new EntitySet<MatchDetail>(new Action<MatchDetail>(this.attach_MatchDetails1), new Action<MatchDetail>(this.detach_MatchDetails1));
			this._PlayerInfos = new EntitySet<PlayerInfo>(new Action<PlayerInfo>(this.attach_PlayerInfos), new Action<PlayerInfo>(this.detach_PlayerInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamDetail_MatchDetail", Storage="_MatchDetails", ThisKey="TeamId", OtherKey="TeamAId")]
		public EntitySet<MatchDetail> MatchDetails
		{
			get
			{
				return this._MatchDetails;
			}
			set
			{
				this._MatchDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamDetail_MatchDetail1", Storage="_MatchDetails1", ThisKey="TeamId", OtherKey="TeamBId")]
		public EntitySet<MatchDetail> MatchDetails1
		{
			get
			{
				return this._MatchDetails1;
			}
			set
			{
				this._MatchDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamDetail_PlayerInfo", Storage="_PlayerInfos", ThisKey="TeamId", OtherKey="TeamId")]
		public EntitySet<PlayerInfo> PlayerInfos
		{
			get
			{
				return this._PlayerInfos;
			}
			set
			{
				this._PlayerInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchDetails(MatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeamDetail = this;
		}
		
		private void detach_MatchDetails(MatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeamDetail = null;
		}
		
		private void attach_MatchDetails1(MatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeamDetail1 = this;
		}
		
		private void detach_MatchDetails1(MatchDetail entity)
		{
			this.SendPropertyChanging();
			entity.TeamDetail1 = null;
		}
		
		private void attach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeamDetail = this;
		}
		
		private void detach_PlayerInfos(PlayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.TeamDetail = null;
		}
	}
}
#pragma warning restore 1591
